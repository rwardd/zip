zip rtos
===
Assumes `qemu-system-riscv32` is installed on the host machine

To start:
`$ zig build run`

To start qemu in debug mode (will spawn gdb server and wait for remote connection):
`$ zig build run -Ddebug`

Basic scheduler working:
- Pathetic RR scheduling
- Tasks have to yield themselves (coop multitasking)
- Working on risc-v 32 virt qemuA

in progress:
- lookng at cortex-m0

Next up:
- start writing some tests (urgent)
- revert tcb registers - arch specific packed struct? (still need to fix because it's terrible)
- Put thread stacks in own linker section

Notes:
Start with microkernel. Implement barebones for basic scheduling and i/o.
Get it running on softcore rv32.
Maybe will move to monolithic design.

Statically allocate tasks for now

todo:
- Create basic kernel memory allocator
	- just use static pool for now
	- allocate tcb in pool upon task creation
	- store sp/pc
todo: everything
- thread creation
	- just do compile time for now
- thread memory
	- tls
	- thread memory arenas?
- thread scheduler
	- most threads should run in ring 0? No syscalls?
	  instead implement a check before calling syscall fns
- timers
	- hardware
	- softare
- atomics
- serial logger
- mempool/arena/slab?
- ipc
	- message queue
	- semaphore
	- mutex
	- queue

